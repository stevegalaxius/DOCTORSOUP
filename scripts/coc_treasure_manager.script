-- ============================================================
--
-- coc_treasure_manager.script
--	CoC 1.5b r4 - DoctorX Questlines 2.0
--
--	Modified by: DoctorX
--	Last revised: May 15, 2020
--
-- ============================================================


-- ////////////////////////////////////////////////////////////////////////////////////////////////
--
-- Global Vars
--
--	Created by DoctorX
--	for DoctorX Questlines 2.0
--	September 17, 2019
--
-- ------------------------------------------------------------------------------------------------

-- List of all caches and their smart terrains:
local drx_ql_trs_mgr_cache_smarts = {}

-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


--[[
------------------------------------------------------------------------------------------------------------------
-- Treasure randomizer
-- by Alundaio
------------------------------------------------------------------------------------------------------------------
This script spawns loot, randomly, inside all INVBOX class objects. Loot is determined on new game start and stored
within the .scoc as a string. When the cache is opened, the loot is spawned.

A list of all valid item sections is generated automatically by parsing all of system_ini(). From this list, loot can be obtained. If you do not
want a certain section from being spawned, put it in 'plugins\treasure_blacklist' 'ignore_sections'.

A valid item section is determined by several factors:
1. It must have can_trade = true
2. It must have quest_item = false
3. It must not have '_mp' in it's section name
4. It must have a valid 'inv_name' value
5. 'cost' must be greater than 0

To debug or to obtain a list of valid item sections, simply enable DEV_DEBUG (-dbg in command line).
You shall find a 'valid_item_sections.ltx' in your main game directory after you start a new game.

To debug the actual results, start a new game. Then while in the loadscreen menu ctrl+left-click on the new 'autosave'. You
will find the <filename>.lua in your savegame folder. Search the file for 'caches'
--]]

caches = {}
local caches_count = 0

local ltx = ini_file("plugins\\treasure_blacklist.ltx")
local valid_item_list = nil
local valid_map_spots = {
	["treasure"] = true,
	["treasure_player"] = true,
	["treasure_searched"] = true,
	["treasure_unique"] = true,
}
------------------------------------------------------------------------------------------------------------------
--							PRIVATE
------------------------------------------------------------------------------------------------------------------


-- ////////////////////////////////////////////////////////////////////////////////////////////////
--
-- drx_ql_trs_mgr_fill_smart_list function
--
-- ------------------------------------------------------------------------------------------------
--
--	Description:
--		- Find nearest smart terrains for caches and saves them in an array
--
--	Usage:
--		drx_ql_trs_mgr_fill_smart_list( )
--
--	Parameters:
--		none
--
--	Return value (type: nil):
--		none
--
-- ------------------------------------------------------------------------------------------------
--	Created by DoctorX
--	for DoctorX Questlines 2.0
--	Last modified September 17, 2019
-- ------------------------------------------------------------------------------------------------

-- Find nearest smart terrains for caches:
function drx_ql_trs_mgr_fill_smart_list( )

	-- Check if list already filled:
	if ( not is_empty( drx_ql_trs_mgr_cache_smarts ) ) then
		return
	end

	-- Ensure caches were created:
	if ( (not caches_count) or (is_empty( caches )) ) then
		return
	end

	-- Fill smart terrain list:
	for box_id, not_available in pairs( caches ) do
		local box_obj = alife( ):object( box_id )
		if ( box_obj ) then

			-- Get the closest smart terrain to the box:
			local box_smart_name
			local box_smart_dist
			for smart_id, smart in pairs( SIMBOARD.smarts ) do
				local smrt_obj = alife( ):object( smart_id )
				if ( smrt_obj ) then
					if ( game_graph( ):vertex( box_obj.m_game_vertex_id ):level_id( ) == game_graph( ):vertex( smrt_obj.m_game_vertex_id ):level_id( ) ) then
						local dist = smrt_obj.position:distance_to_sqr( box_obj.position )
						if ( (not box_smart_dist) or (dist < box_smart_dist) ) then
							box_smart_name = smrt_obj:name( )
							box_smart_dist = dist
							if ( box_smart_dist <= 2500 ) then
								break
							end
						end
					end
				end
			end

			-- Add the smart terrain name to the cache smarts list:
			if ( box_smart_name ) then
				drx_ql_trs_mgr_cache_smarts[box_obj.id] = box_smart_name
			end

		end
	end

	-- Set return value:
	return

end

-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


local function on_game_load()
	if (caches_count > 0) then
		return
	end

	local ignore_list = {
		["bar_inv_box"] = true,


		-- //////////////////////////////////////////////////////////////////////////////////////////////
		--
		-- Exclude out of reach stashes
		--
		--	Modified by DoctorX
		--	for DoctorX Questlines 2.0
		--	Last modified May 15, 2020
		--
		-- ----------------------------------------------------------------------------------------------

-- 		["bar_inventory_box_2"] = true
		["bar_inventory_box_2"] = true,
		["level_prefix_inventory_box_0023"] = true,  -- Wild Territory, log near old exit to Garbage

		-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


	}

	local sim = alife()
	for i=1, 65534 do
		local se_obj = sim:object(i)
		if (se_obj) then
			if (IsInvbox(nil,se_obj:clsid()) and not ignore_list[se_obj:name()]) then
				caches[se_obj.id] = false
				caches_count = caches_count + 1
			--elseif (se_obj:spawn_ini() and se_obj:spawn_ini():section_exist("drop_box")) then
			--	box_caches[se_obj.id] = false
			--	box_caches_count = caches_count + 1
			end
		end
	end

	for i=1, math.floor(caches_count/2) do
		create_random_stash(true,"stash")
	end

	-- remove all unused stashes from the list
	--[[
	for k,v in pairs(caches) do
		if (v == false) then
			caches[k] = nil
		end
	end
	--]]
end

local function actor_on_item_take_from_box(box,itm)
	if (caches[box:id()] == true) then
		-- Remove all existing map spots from the cache.
		-- Remember that this will only apply to randomly generated stashes.
		for k, v in pairs(valid_map_spots) do
			level.map_remove_object_spot(box:id(), k)
		end

		-- Mark the stash as "partially looted".
		local id = alife_object(box:id()).id
		-- level.map_add_object_spot_ser(id, "treasure_searched", game.translate_string("st_ui_pda_secret_searched"))

		-- Remove the cache from the treasure manager.
		caches[box:id()] = false
		xr_statistic.inc_counter("stashes_found")
		news_manager.send_treasure(1)
	end

	-- If no items remain; remove the "partially looted" marker.
	if box:is_inv_box_empty() then
		if level.map_has_object_spot(box:id(), "treasure_searched") then
			level.map_remove_object_spot(box:id(), "treasure_searched")
		end
	end

end

local function save_state(data)
	--alun_utils.debug_write("coc_treasure_manager.save_state")
	if (caches_count <= 0) then
		return
	end

	if not (data.coc_treasure_manager) then
		data.coc_treasure_manager = {}
	end

	data.coc_treasure_manager.caches_count = caches_count
	data.coc_treasure_manager.caches = caches
end

local function load_state(data)
	if not (data.coc_treasure_manager) then
		return
	end

	caches_count = data.coc_treasure_manager.caches_count or caches_count
	caches = data.coc_treasure_manager.caches or caches

	data.coc_treasure_manager.caches_count = nil
	data.coc_treasure_manager.caches = nil
end

local function physic_object_on_use_callback(box,who)
	if (IsInvbox(box)) then
		try_spawn_treasure(box)
	end
end
------------------------------------------------------------------------------------------------------------------
--							ON GAME START
------------------------------------------------------------------------------------------------------------------
function on_game_start()


	-- ////////////////////////////////////////////////////////////////////////////////////////////////
	--
	-- Actor on update callback
	--
	--	Created by DoctorX
	--	for DoctorX Questlines 2.0
	--	Last modified September 17, 2019
	--
	-- ------------------------------------------------------------------------------------------------

	-- Actor on update:
	RegisterScriptCallback( "actor_on_update", drx_ql_trs_mgr_fill_smart_list )

	-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


	RegisterScriptCallback("on_game_load",on_game_load)
	RegisterScriptCallback("actor_on_item_take_from_box",actor_on_item_take_from_box)
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
	RegisterScriptCallback("physic_object_on_use_callback",physic_object_on_use_callback)
end

-------------------------------------------------------------------------------------------------------------------

last_secret = nil
function create_random_stash(no_spot,hint,bonus_items, map_spot)
	map_spot = valid_map_spots[map_spot] and map_spot or "treasure"

	last_secret = nil

	if (caches_count <= 0) then
		return
	end

	last_secret = true

	local sim = alife()


	-- ///////////////////////////////////////////////////////////////////////////////////////////////
	--
	-- Determine Search Radius
	--
	--	Ini requirements:
	--		drx\drx_ql_config.ltx
	--			[sim_task_props]
	--				target_min_radius (type: float, meters)
	--					- Minimum distance from actor to search for target areas
	--				target_max_radius (type: float, meters)
	--					- Maximum distance from actor to search for target areas
	--				target_exp (type: int)
	--					- Exponent to use for max target distance calculations
	--				target_tiers (type: int)
	--					- Number of tiers to divide potential targets into
	--
	--	Added by DoctorX
	--	for DoctorX Questlines 2.0
	--	January 24, 2019
	--
	-- -----------------------------------------------------------------------------------------------

	-- Location of the settings file:
	local ini = ini_file( "drx\\drx_ql_config.ltx" )
	if ( not ini ) then
		printf( "DRX QL Error: Unable to create random stash, cannot locate ini file" )
		return
	end

	-- Determine target search radius:
	local min_radius = (ini:r_float_ex( "sim_task_props", "target_min_radius" ) or 0)
	local max_radius = (ini:r_float_ex( "sim_task_props", "target_max_radius" ) or 0)
	local radius_exp = (ini:r_float_ex( "sim_task_props", "target_exp" ) or 0)
	local target_tiers = (ini:r_float_ex( "sim_task_props", "target_tiers" ) or 0)
	local radius = min_radius
	if ( min_radius > max_radius ) then
		min_radius = max_radius
	end
	local delta = (max_radius - min_radius)
	if ( delta > 0 ) then
		radius = (min_radius + math.ceil( (delta * ((math.random( delta ) ^ radius_exp) / (delta ^ radius_exp))) ))
	end

	-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


	-- create a temporary table to use math.random
	local t = {}
	local size_t = 0
	for id,v in pairs(caches) do
		-- false means box is available
		if (v == false) then


			-- /////////////////////////////////////////////////////////////////////////////////////////////
			--
			-- Populate Eligible Stashes List
			--
			--	Modified by DoctorX
			--	for DoctorX Questlines 2.0
			--	September 14, 2019
			--
			-- ---------------------------------------------------------------------------------------------

			-- If not a quest or reward stash just add it to the list:
			if ( no_spot ) then
				size_t = (size_t + 1)
				t[size_t] = id

			-- If the box is a reward or quest stash weight it by distance to actor:
			else

				-- Get the box object:
				local box_obj = alife( ):object( id )
				if ( box_obj ) then

					-- Get the smart terrain the box is located at:
					local smart_name = drx_ql_trs_mgr_cache_smarts[id]
					if ( smart_name ) then

						-- Check smart terrain is not underground:
						local smart = SIMBOARD.smarts_by_names[smart_name]
						if ( smart ) then
							local smrt_obj = alife( ):object( smart.id )
							if ( (smrt_obj) and (level_weathers.valid_levels[alife( ):level_name( game_graph( ):vertex( smrt_obj.m_game_vertex_id ):level_id( ) )]) ) then

								-- Check if the smart terrain is not blacklisted:
								if ( (xr_conditions.drx_ql_smart_not_blacklisted( nil, nil, {smart_name} )) and (xr_conditions.drx_ql_smart_not_scorched( nil, nil, {smart_name} )) ) then

									-- Weight the current box as inverse of distance to actor:
									local weight = 1
									local nearest_smart_id = smart_terrain.nearest_to_actor_smart.id
									local nearest_smart_obj = alife( ):object( nearest_smart_id )
									if ( not nearest_smart_obj ) then
										printf( "DRX QL Error: Unable to find smart terrain closest to actor" )
									else
										local dist = utils.graph_distance( nearest_smart_obj.m_game_vertex_id, box_obj.m_game_vertex_id )
										if ( dist > radius ) then
											weight = 0
										elseif ( (radius > 0) and (target_tiers > 0) ) then
											weight = (target_tiers - math.ceil( (dist / (radius / target_tiers)) ) + 1)
										end

										-- Add the current box to the list of available caches:
										for n = 1, ( weight ) do
											size_t = (size_t + 1)
											t[size_t] = id
										end
									end

								end

							end
						end

					end

				end

			end

-- 			size_t = size_t + 1
-- 			t[size_t] = id

			-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


		end
	end

	local index = size_t > 0 and math.random(size_t)
	if not (index) then
		return
	end

	local id = t[index]
	local se_box = id and sim:object(id)
	if not (se_box) then
		caches[id] = nil
		caches_count = caches_count - 1
		return
	end

	if not (valid_item_list) then
		valid_item_list = get_valid_item_sections()
	end

	local spawned_item = bonus_items or {}
	local max_weight = math.random(80,130)

	if (has_alife_info("achieved_rag_and_bone")) then
		max_weight = max_weight + 30
	end

	local ini = system_ini()
	local function is_consumable(section)
		local v = ini:r_string_ex(section,"class","")
		return v == "S_FOOD" or v == "II_FOOD"
	end

	local function is_outfit(section)
		local v = ini:r_string_ex(section,"class","")
		return v == "EQU_STLK" or v == "E_STLK" or v == "EQU_HLMET" or v == "E_HLMET"
	end

	local function is_weapon(section)
		local v = ini:r_string_ex(section,"class","")
		return string.find(v,"WP_") ~= nil
	end

	local function try_spawn_item(sec,min,max,chance,weight)
		if (max_weight >= weight) then
			local new_max = math.random(min,max)
			for i=1,new_max do
				if ((math.random(1,100)/100) <= chance) then
					spawned_item[#spawned_item+1] = sec
					max_weight = max_weight - weight
				end
			end
		end
	end

	local allow_item = true
	-- iterate most expensive to least expensive or visa versa. Highest cost has highest weight. Consumables have higher max. Outfits have high weights.
	local functor = random_choice(function(t,a,b) return t[a] > t[b] end,function(t,a,b) return t[a] < t[b] end)
	for section,cost in spairs(valid_item_list,functor) do

		-- prevent a stash from having more than a single outfit or weapon
		local skip = false
		local bWeapon = is_weapon(section)
		local bOutfit = not bWeapon and is_outfit(section)
		if (bWeapon or bOutfit) then
			if (allow_item) then
				allow_item = false
			else
				skip = true
			end
		end

		if not (skip) then
			-- decide for each section based on chance, weight and item classification
			if (cost <= 500) then
				if (is_consumable(section)) then
					try_spawn_item(section,1,4,0.25,40)
				elseif (bOutfit) then
					try_spawn_item(section,1,1,0.25,40)
				elseif (bWeapon) then
					try_spawn_item(section,1,1,0.25,40)
				else
					try_spawn_item(section,1,1,0.25,40)
				end
			elseif (cost <= 1000) then
				if (is_consumable(section)) then
					try_spawn_item(section,1,4,0.15,50)
				elseif (bOutfit) then
					try_spawn_item(section,1,1,0.15,50)
				elseif (bWeapon) then
					try_spawn_item(section,1,1,0.15,50)
				else
					try_spawn_item(section,1,1,0.15,50)
				end
			elseif (cost <= 3000) then
				if (bOutfit) then
					try_spawn_item(section,1,1,0.10,55)
				elseif (bWeapon) then
					try_spawn_item(section,1,1,0.10,45)
				else
					try_spawn_item(section,1,1,0.10,45)
				end
			elseif (cost <= 5000) then
				if (bOutfit) then
					try_spawn_item(section,1,1,0.08,60)
				elseif (bWeapon) then
					try_spawn_item(section,1,1,0.08,50)
				else
					try_spawn_item(section,1,1,0.08,50)
				end
			elseif (cost <= 10000) then
				try_spawn_item(section,1,1,0.01,90)
			elseif (cost <= 15000) then
				try_spawn_item(section,1,1,0.01,100)
			elseif (cost <= 20000) then
				try_spawn_item(section,1,1,0.01,110)
			else
				try_spawn_item(section,1,1,0.01,120)
			end
		end

		if (max_weight <= 0) then
			break
		end
	end

	if (#spawned_item > 0) then
		-- create map spot
		local ignore = nil
		for k, v in pairs(valid_map_spots) do
			if (level.map_has_object_spot(id,k) ~= 0) then
				ignore = true
			end
		end
		if (no_spot ~= true and not ignore) then


			-- /////////////////////////////////////////////////////////////////////////////////////////////
			--
			-- Add ShoC / CS stash names
			--
			--	- Modification of stash_names( ) from Stashes from SOCH and CS for CoC1.4.22 by av661194
			--
			--	Ini requirements:
			--		plugins\stash_names.ltx from Stashes from SOCH and CS for CoC1.4.22 by av661194
			--			[stash_tbl]
			--				{stash_name} (type: string, stash name)
			--					- Stash name and stash hint string id
			--
			--	Added by DoctorX
			--	for DoctorX Questlines 2.0
			--	May 13, 2019
			--
			-- ---------------------------------------------------------------------------------------------

			-- Location of the stash rename addon config file:
			local stash_names_ini = ini_file( "plugins\\stash_names.ltx" )
			if ( stash_names_ini ) then

				-- Format stash name:
				local stash_name = se_box:name( )
				if ( string.find( stash_name, "level_prefix" ) ~= nil ) then
					local level = sim:level_name( game_graph( ):vertex( se_box.m_game_vertex_id ):level_id( ) )
					stash_name = string.gsub( stash_name, "level_prefix", level, 1 )
				end
				stash_name = stash_names_ini:r_string_ex( "stash_tbl", stash_name )

				-- Format stash hint text:
				if ( stash_name == nil ) then
					hint = (hint or game.translate_string( "st_ui_pda_secret" ))
				else
					local name = game.translate_string( string.format( "st_%s_name", stash_name ) )
					local descr = game.translate_string( string.format( "st_%s_descr", stash_name ) )
					stash_name = ("%c[255,255,160,0]" .. name .. "\\n%c[default]" .. descr .. "\\n%c[160,0,255,255]" .. (hint or ""))
					hint = stash_name
				end

			end

			-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


			level.map_add_object_spot_ser(id, map_spot or "treasure", hint or game.translate_string("st_ui_pda_secret"))
			news_manager.send_treasure(0)
		end
		caches[id] = table.concat(spawned_item,",")
	else
		caches[id] = false
	end


	-- ///////////////////////////////////////////////////////////////////////////////////////////////
	--
	-- Return Cache Id
	--
	--	Added by DoctorX
	--	for DoctorX Questlines 2.0
	--	January 06, 2018
	--
	-- -----------------------------------------------------------------------------------------------

	-- Return cache id:
	return id

	-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


end

function try_spawn_treasure(box)
	local id = box:id()

	--printf("try_spawn_treasure [%s]",caches[id])

	if not (caches[id]) then
		return
	end

	if not (type(caches[id]) == "string") then
		return
	end

	local spawned_item = alun_utils.str_explode(caches[id],",")
	caches[id] = true

	local sec,ammos,ct,ammo_type
	local ini = system_ini()
	local sim = alife()
	for i=1,#spawned_item do
		sec = spawned_item[i]
		if (sec ~= "" and ini:section_exist(sec)) then

			if (utils.is_ammo(sec)) then
				create_ammo(sec,box:position(),box:level_vertex_id(),box:game_vertex_id(),id,math.random(10,30))
			else
				-- since we spawning on parent, we don't want to register object or packetdata will be inaccurate
				local se_obj = sim:create(sec,box:position(),0,0,id)
				if (se_obj) then
					local cls = se_obj:clsid()
					if (IsWeapon(nil,cls) and cls ~= clsid.wpn_knife_s) then
						se_obj.condition = (math.random(70)+30)/100

						local flags = se_obj:get_addon_flags()
						if (math.random() <= 0.3 and se_obj.scope_status == cse_alife_item_weapon.eAddonAttachable) then
							flags:set(cse_alife_item_weapon.eWeaponAddonScope,true)
						end

						if (math.random() <= 0.3 and se_obj.grenade_launcher_status == cse_alife_item_weapon.eAddonAttachable) then
							flags:set(cse_alife_item_weapon.eWeaponAddonGrenadeLauncher,true)
						end

						if (math.random() <= 0.3 and se_obj.silencer_status == cse_alife_item_weapon.eAddonAttachable) then
							flags:set(cse_alife_item_weapon.eWeaponAddonSilencer,true)
						end

						-- Create random ammo type
						ammos = alun_utils.parse_list(ini,sec,"ammo_class")
						ct = ammos and #ammos
						ammo_type = ammos and ct and math.random(0,ct-1) or 0

						se_obj.ammo_type = ammo_type
					end
				end
			end
		else
			printf("coc_treasure_manager.script: invalid section %s",sec)
		end
	end
end

function save(pk)
	if (USE_MARSHAL) then
		return
	end
	pk:w_u16(caches_count)
	for id,v in pairs(caches) do
		pk:w_u16(id)
		pk:w_bool(v)
	end
end

function load(pk)
	if (USE_MARSHAL) then
		return
	end
	caches_count = pk:r_u16()
	for i=1,caches_count do
		caches[pk:r_u16()] = pk:r_bool()
	end
end

function get_valid_item_sections()
	local t = {}
	local ini = system_ini()
	ini:section_for_each(function(section)
		if not (ltx:line_exist("ignore_sections",section)) then
			if (ini:line_exist(section,"cform")) then
				if (ini:r_bool_ex(section,"can_trade",true) == true) then
					if (ini:r_bool_ex(section,"quest_item",false) == false) then
						if not (string.find(section,"mp_")) then
							local name = ini:r_string_ex(section,"inv_name")
							if (name and name ~= "" and name ~= "default") then
								local cost = ini:r_float_ex(section,"cost") or 0
								if (cost > 0) then
									t[section] = cost
								end
							end
						end
					end
				end
			end
		end
	end
	)

	-- List of all items in game that are not quest items
	if (DEV_DEBUG_DEV) then
		local cfg = io.open("valid_item_sections.ltx","w+")
		for k,v in pairs(t) do
			cfg:write(k.."\n")
		end
		cfg:close()
	end
	return t
end